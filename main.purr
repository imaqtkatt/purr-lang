picles y:int -> y

apply f:(int -> int) a:int -> f(a)

batata () -> apply(fun x -> x, 1)

//{
  //arg:int <- 10;
  //(fun x:bool -> x)(arg)
//}

//(fun x:(int -> int) -> x) (fun x:int -> x) (1)

//one -> 1

//type inc_type : int -> int

//add x:int y:int -> x + y

//enum bool : true(), false().

//main () -> (fun x y -> x + y)(1, 2)

//id x:'a -> (fun x:'a -> x)(x)

//fun x:(int -> int) y -> {
//  z -> 1 + 2,
//  (fun x:int -> x)(1),
//  x(y)
//}

//inc:((bool -> num) -> num)

//(())

//(1 + 1) * 2

//add x y -> x + y

//foo x:int ->
//  res -> x + 1;
//  res * 2

//apply f:('a -> 'b) a -> f(a)

//unit -> ()

//do_nothing () -> ()




//sim int pra Hole(0)
//picles y:int -> y

//acho que sim

//define: int -> Hole(0)
//declare:
  //body_t = infer(body): int
  //unify(body_t, hole_t)
